#!/usr/bin/env python
import sys
import threading
import time
import errno
from subprocess import Popen, PIPE
import mesos
import mesos_pb2

def main():
  driver = mesos.MesosExecutorDriver(MshExecutor(sys.argv[1:]))
  sys.exit(0 if driver.run() == mesos_pb2.DRIVER_STOPPED else 1)

class MshExecutor(mesos.Executor):
  def __init__(self, args):
    self.args  = args
    self.proc  = Popen(self.args, stdin=PIPE, stdout=PIPE, stderr=PIPE)

  def frameworkMessage(self, driver, message):
    if message == "EOF":
      self.proc.stdin.close()
      self.proc.wait()
    else:
      try:
        self.proc.stdin.write(message)
      except IOError as e:
        if e.errno == errno.EPIPE or e.errno == errno.EINVAL:
          self.proc.stdin.close()
          self.proc.wait()
        else:
          raise

  def launchTask(self, driver, task):
    def run_task():
      sendTaskStatus(mesos_pb2.TASK_RUNNING)
      sendOutput()
      sendTaskStatus(mesos_pb2.TASK_FINISHED)

    def sendTaskStatus(state):
      update = mesos_pb2.TaskStatus()
      update.task_id.value = task.task_id.value
      update.state = state
      driver.sendStatusUpdate(update)

    def sendOutput():
      for line in self.proc.stdout.readlines():
        driver.sendFrameworkMessage(line.rstrip())
      driver.sendFrameworkMessage('EOF')

    thread = threading.Thread(target=run_task)
    thread.start()

if __name__ == "__main__":
  main()
